// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	proto/service.proto

It has these top-level messages:
	CliCommandReq
	CliCommandRes
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CliCommandReq struct {
	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *CliCommandReq) Reset()                    { *m = CliCommandReq{} }
func (m *CliCommandReq) String() string            { return proto.CompactTextString(m) }
func (*CliCommandReq) ProtoMessage()               {}
func (*CliCommandReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CliCommandReq) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type CliCommandRes struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CliCommandRes) Reset()                    { *m = CliCommandRes{} }
func (m *CliCommandRes) String() string            { return proto.CompactTextString(m) }
func (*CliCommandRes) ProtoMessage()               {}
func (*CliCommandRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CliCommandRes) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CliCommandReq)(nil), "CliCommandReq")
	proto.RegisterType((*CliCommandRes)(nil), "CliCommandRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CLI service

type CLIClient interface {
	CliCommand(ctx context.Context, in *CliCommandReq, opts ...grpc.CallOption) (*CliCommandRes, error)
}

type cLIClient struct {
	cc *grpc.ClientConn
}

func NewCLIClient(cc *grpc.ClientConn) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) CliCommand(ctx context.Context, in *CliCommandReq, opts ...grpc.CallOption) (*CliCommandRes, error) {
	out := new(CliCommandRes)
	err := grpc.Invoke(ctx, "/CLI/CliCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CLI service

type CLIServer interface {
	CliCommand(context.Context, *CliCommandReq) (*CliCommandRes, error)
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_CliCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CliCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).CliCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CLI/CliCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).CliCommand(ctx, req.(*CliCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CliCommand",
			Handler:    _CLI_CliCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

func init() { proto.RegisterFile("proto/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0xf3, 0x94, 0x34, 0xb9, 0x78,
	0x9d, 0x73, 0x32, 0x9d, 0xf3, 0x73, 0x73, 0x13, 0xf3, 0x52, 0x82, 0x52, 0x0b, 0x85, 0x24, 0xb8,
	0xd8, 0x93, 0x21, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x17, 0x5d, 0x69, 0x31,
	0x48, 0x69, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0x58, 0x29, 0x67, 0x10, 0x8c, 0x6b, 0x64,
	0xca, 0xc5, 0xec, 0xec, 0xe3, 0x29, 0xa4, 0xc7, 0xc5, 0x85, 0xd0, 0x21, 0xc4, 0xa7, 0x87, 0x62,
	0x93, 0x14, 0x2a, 0xbf, 0x58, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x26, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0xd0, 0xe2, 0x58, 0xaa, 0x00, 0x00, 0x00,
}
